{
  "hash": "e49adaa930d85dc9a37ccdd0a53b32ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gap Data\"\nauthor: \"Special Projects/DSSU/DIQA\"\ndate: \"11/8/2021\"\noutput: html_document\n---\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nknitr::opts_chunk$set(eval = FALSE)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n# Load R libraries.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(DBI)\nlibrary(odbc)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(openxlsx)\nlibrary(reticulate)\nlibrary(knitr)\nlibrary(data.table)\nlibrary(R.utils)\nlibrary(gt)\nlibrary(blastula)\nlibrary(keyring)\nlibrary(flextable)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Read in required data_objects and define objects.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# read in r_creds.RDS\nr_creds <-readRDS(file.path(Sys.getenv(\"USERPROFILE\"), \"Projects/Sequencing/Data_Objects\", \"r_creds.RDS\")) \n\n# read in 'wa_gisaid_data.tsv'\nwa_gisaid_data <- fread(\"GISAID Data/wa_gisaid_data.tsv\",data.table = FALSE)\n\n# read in 'metadata.tsv.gz'\ngisaid_metadata <- fread(\"metadata.tsv.gz\",data.table = FALSE)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Check GISAID objects\nCheck that today's wa_gisaid_data and metadata files have been downloaded and are available. If not, stop the script and send an email.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# dir containing contaning the metadata.tsv.gz and wa_gisaid_data.tsv file\ngisaid_files_dir <- dir_info(\"GISAID Data\", type = \"file\")\n\n# if the wa_gisaid_data.tsv is not in the dir, or metadata.tsv.gz is not in the dir, or the last complete date in the WAgisaid_objects.p is not today \nif (!(any(str_detect(gisaid_files_dir$path, \"wa_gisaid_data.tsv$\"))) | !(any(str_detect(gisaid_files_dir$path, \"metadata.tsv.gz$\")))) {\n  \n    # send an email stating the files required to run this process are not output correctly/up to date\n  email_from <- \"\"\n  email_to <- c(\"\")\n  email_subj <- \"Sequencing - Gap Data Output Error Automated Email\"\n  email_body <- \"The wa_gisaid_data.tsv and/or metadata.tsv.gz file may not be output correctly or is not up to date. Please check the WAgisaid_objects.p file.\"\n\n  # send it\n  sendmailR::sendmail(from = email_from,\n                    to = email_to,\n                    subject = email_subj,\n                    msg = email_body,\n                    headers= list(\"Reply-To\" = email_from),\n                    control = list(smtpServer = \"\"))\n  \nprint(\"The wa_gisaid_data.tsv and/or metadata.tsv.gz file may not be output correctly or is not up to date. Please check the WAgisaid_objects.p file. Script has been stopped and rendered up to this point.\")\n  \n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Exit if Objects Not in Directory\nExit run/render of script if the wa_gisaid_data.tsv is not in the dir, or metadata.tsv.gz is not in the dir, or the last complete date in the WAgisaid_objects.p is not today . When this rmd is ran from a trigger script which uses render() the script will stop here and only render up to this point.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# exit if the wa_gisaid_data.tsv is not in the dir, or metadata.tsv.gz is not in the dir, or the last complete date in the WAgisaid_objects.p is not today \nif (!(any(str_detect(gisaid_files_dir$path, \"wa_gisaid_data.tsv$\"))) | !(any(str_detect(gisaid_files_dir$path, \"metadata.tsv.gz$\")))) {\n  knit_exit()\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Cleanup prefix from IDs.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nwa_gisaid_data<- wa_gisaid_data %>% mutate(virus_name_clean=str_replace(`Virus name`,\"hCoV-19/\", \"\"))\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Filter metadata on state (WA).\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nwa_gisaid_metadata <- gisaid_metadata %>%\n  filter(str_detect(strain, \"^USA/WA.*\") | division == \"Washington\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Create an R Object with the joined metadata and WA_GISAID data\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nwa_gisaid <- wa_gisaid_data %>%\n  left_join(wa_gisaid_metadata, by = c(virus_name_clean = \"strain\")) %>%\n  mutate(VIRUS_ID_PART1 = sapply(strsplit(`Virus name`, \"-\"), function(x) rle(x)$value[2])) %>%\n  mutate(VIRUS_ID_PART1 = gsub(\"[^A-z]\", \"\", VIRUS_ID_PART1)) %>%\n  mutate(VIRUS_ID_PART1 = ifelse(is.na(VIRUS_ID_PART1), \"\", VIRUS_ID_PART1)) %>%\n  mutate(VIRUS_ID_PART2 = sapply(strsplit(`Virus name`, \"-\"), function(x) rle(x)$value[3])) %>%\n  mutate(VIRUS_ID_PART2 = ifelse(VIRUS_ID_PART2 == \"2\", \"2\", gsub(\"[^A-z]\", \"\", VIRUS_ID_PART2))) %>%\n  mutate(VIRUS_ID_PART2 = ifelse(is.na(VIRUS_ID_PART2), \"\", VIRUS_ID_PART2)) %>%\n  mutate(YM_collection = substr(`Collection date`, 1, 7)) %>%\n  select(`Virus name`, virus_name_clean, originating_lab, submitting_lab, date_submitted, YM_collection, everything())\n\n# Virus name isn't easily read into R since there is a space. change it to have a _ instead\n# names(wa_gisaid)<-str_replace_all(names(wa_gisaid), c(\" \" = \"_\" , \",\" = \"\" ))\n\n# Request from Molec Epi to change date_submitted to character in the wa_gisaid R Object\nwa_gisaid$date_submitted <- as.character(wa_gisaid$date_submitted)\n\nsaveRDS(wa_gisaid, \"GISAID Data/wa_gisaid.rds\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Check Day\n\n- If not Monday or Thursday, send email notifying completion of wa_gisaid r object and exit script\n- If Monday or Thursday, continue to Gap Data portion\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# call directory of the gisaid folder\nwa_gisaid_data_dir <- dir_info(\"GISAID Data\", type = \"file\")\n\n# If not Monday/Thursday, send email wa_gisaid.RDS complete\nif(any(str_detect(wa_gisaid_data_dir$path, paste0(\"wa_gisaid.rds\"))) & (!(wday(today()) == 2 | wday(today()) == 5))) {\n  \n  \n  email_from <- \"\"\n  email_to <- c(\"\")\n  email_subj <- \"Sequencing - Automated Notification - wa_gisaid.rds Complete\"\n  email_body <- \"There is a new wa_gisaid.rds dropped in the GISAID Data folder.\"\n\n  # send it\n  sendmailR::sendmail(from = email_from,\n                    to = email_to,\n                    subject = email_subj,\n                    msg = email_body,\n                    headers= list(\"Reply-To\" = email_from),\n                    control = list(smtpServer = \"\"))\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Exit if Day\nExit run/render of script if it is not Monday/Thursday. When this rmd is ran from a trigger script which uses render() the script will stop here and only render up to this point.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# exit if it is not the first Wed of the month \nif (!(wday(today()) == 2 | wday(today()) == 5)) {\n  print(\"Not Monday or Thursday, stop script here\")\n  knit_exit()\n  stop()\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Gap Production Code \n\n- The remaining code is for the production of the 2x per week Gap Data File\n- The Gap Data file will be produced on Mondays and Thursdays\n- Gap data are sequence accessions in GISAID that are NOT in WDRS, regardless of submission status\n- Gap data may include data that DOH has received, but were unable to match/contain quality errors not yet fixed\n\n# Open connection to WDRS.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# connect\nconnection <- DBI::dbConnect(odbc::odbc(), \n                             Driver = r_creds$conn_list[1], \n                             Server = r_creds$conn_list[2], \n                             Database = r_creds$conn_list[3], \n                             Trusted_connection = r_creds$conn_list[4], \n                             ApplicationIntent = r_creds$conn_list[5]\n                             )\n```\n:::\n\n\n\n\n\n\n\n\n\n\n- Select cases with accession numbers from sequencing table\n- Only exclude cases that have been soft deleted from WDRS \n- This will help us catch sequences that may have been \"deleted\" when a case was soft deleted in WDRS OR when two events were merged and sequencing was not carried over\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nwdrs_seq <- dbGetQuery(connection, \"\n  SELECT CASE_ID,\n  SEQUENCE_ACCESSION_NUMBER\n  FROM [dbo].[DD_GCD_COVID19_SEQUENCING]\n  WHERE SEQUENCE_ACCESSION_NUMBER IS NOT NULL\n  AND SEQUENCE_ACCESSION_NUMBER <> ''\n  AND CASE_STATUS !='6'\n  \")\n\n# convert from df to vector\nwdrs_seq <- wdrs_seq$SEQUENCE_ACCESSION_NUMBER\n```\n:::\n\n\n\n\n\n\n\n\n\n\n- Create a df with all rows from the wa_gisaid_data where the SEQUENCE_ACCESSIONS (strain) that DO NOT EXIST in WDRS.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ngap <- wa_gisaid_data[(!(tolower(wa_gisaid_data$virus_name_clean) %in% tolower(wdrs_seq))), ]\n\n# create altmatch for uw:\ngap <- gap %>% \n  mutate(altmatch = case_when(\n    nchar(virus_name_clean) == 22 & grepl('WA-UW-', virus_name_clean) ~ \n      paste0('USA/WA-UW-', format(as.Date(`Collection date`), '%y%m'), gsub('^USA/WA-UW-([0-9]{7}/202[0-9])$', '\\\\1', virus_name_clean)),\n    nchar(virus_name_clean) == 23 & grepl('WA-CDC-UW', virus_name_clean) ~ \n      paste0('USA/WA-CDC-UW', format(as.Date(`Collection date`), '%y%m%d'), gsub('^USA/WA-CDC-UW([0-9]{5}/202[0-9])$', '\\\\1', virus_name_clean)),\n    nchar(virus_name_clean) == 24 & grepl('WA-CDC-UW-', virus_name_clean) ~ \n      paste0('USA/WA-CDC-UW', format(as.Date(`Collection date`), '%y%m%d'), gsub('^USA/WA-CDC-UW-([0-9]{5}/202[0-9])$', '\\\\1', virus_name_clean))\n    )\n  )\n\ngap <- gap[is.na(gap$altmatch) | !(tolower(gap$altmatch) %in% tolower(wdrs_seq)), ] #remove matches using created altmatch\n\ngap$altmatch <- NULL #remove temp altmatch column\n  \ngap_gisaid_labs <- gap %>%\n  left_join(wa_gisaid_metadata, by = c(virus_name_clean = \"strain\")) %>%\n  mutate(VIRUS_ID_PART1 = sapply(strsplit(virus_name_clean, \"-\"), function(x) rle(x)$value[2])) %>%\n  mutate(VIRUS_ID_PART1 = gsub(\"[^A-z]\", \"\", VIRUS_ID_PART1)) %>%\n  mutate(VIRUS_ID_PART1 = ifelse(is.na(VIRUS_ID_PART1), \"\", VIRUS_ID_PART1)) %>%\n  mutate(VIRUS_ID_PART2 = sapply(strsplit(virus_name_clean, \"-\"), function(x) rle(x)$value[3])) %>%\n  mutate(VIRUS_ID_PART2 = ifelse(VIRUS_ID_PART2 == \"2\", \"2\", gsub(\"[^A-z]\", \"\", VIRUS_ID_PART2))) %>%\n  mutate(VIRUS_ID_PART2 = ifelse(is.na(VIRUS_ID_PART2), \"\", VIRUS_ID_PART2)) %>%\n  mutate(YM_collection = substr(`Collection date`, 1, 7)) %>%\n  select(virus_name_clean, VIRUS_ID_PART1, VIRUS_ID_PART2, originating_lab, submitting_lab, YM_collection, everything())\n\n# select vars of use\ngap_gisaid_labs_select <- gap_gisaid_labs %>%\n  select(c(\"virus_name_clean\", \"VIRUS_ID_PART1\", \"VIRUS_ID_PART2\", \"originating_lab\", \"submitting_lab\", \"YM_collection\", \"Collection date\", \"Location\", \"Host\", \"Lineage\", \"virus\", \"gisaid_epi_isl\", \"date\",\t\"region\", \"country\", \"division\", \"location\", \"pango_lineage\")) \n\n# remove rows where submitting_lab is na and the collection date has at least has the year-month and the year is in 23/24\n# no longer try to actively reach out for/expecting to receive 2020, 2021, or 2022 data\ngap_gisaid_labs_na_rm <- gap_gisaid_labs_select[\n  #!is.na(gap_gisaid_labs_select$submitting_lab) & \n  str_detect(gap_gisaid_labs_select$YM_collection, \"[[:digit:]]{4}-[[:digit:]]{2}(-[[:digit:]]{2})?\") & \n  str_detect(gap_gisaid_labs_select$YM_collection, \"^2023|^2024\")\n,]\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Read in genbank data\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# read in genbank csv\nfiles <- list.files('GenBank Data/',\n                    pattern = '^wa_genbank_.+csv$',\n                    full.names = T)\nfiles <- sort(files, decreasing = T)[1]\ngenbank <- fread(files, nThread = 2, colClasses = 'character', data.table = FALSE)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Create a df with all rows from genbank where the SEQUENCE_ACCESSIONS (strain) that DO NOT EXIST in WDRS.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ngap_genbank <- genbank[(!(tolower(genbank$`Isolate Lineage`) %in% tolower(wdrs_seq))), ]\n\ngap_genbank_labs <- gap_genbank %>%\n#  left_join(wa_gisaid_metadata, by = c(virus_name_clean = \"strain\")) %>%\n  mutate(VIRUS_ID_PART1 = sapply(strsplit(`Isolate Lineage`, \"-\"), function(x) rle(x)$value[2])) %>%\n  mutate(VIRUS_ID_PART1 = gsub(\"[^A-z]\", \"\", VIRUS_ID_PART1)) %>%\n  mutate(VIRUS_ID_PART1 = ifelse(is.na(VIRUS_ID_PART1), \"\", VIRUS_ID_PART1)) %>%\n  mutate(VIRUS_ID_PART2 = sapply(strsplit(`Isolate Lineage`, \"-\"), function(x) rle(x)$value[3])) %>%\n  mutate(VIRUS_ID_PART2 = ifelse(VIRUS_ID_PART2 == \"2\", \"2\", gsub(\"[^A-z]\", \"\", VIRUS_ID_PART2))) %>%\n  mutate(VIRUS_ID_PART2 = ifelse(is.na(VIRUS_ID_PART2), \"\", VIRUS_ID_PART2)) %>%\n  mutate(YM_collection = substr(`Isolate Collection date`, 1, 7)) %>%\n  select(`Isolate Lineage`, VIRUS_ID_PART1, VIRUS_ID_PART2, cleaned_lab, YM_collection, everything())\n\n# select vars of use\ngap_genbank_labs_select <- gap_genbank_labs %>%\n  select(c(\"Isolate Lineage\", \"VIRUS_ID_PART1\", \"VIRUS_ID_PART2\", \"cleaned_lab\", \"YM_collection\", \"Isolate Collection date\", \"Geographic Location\", \"Host Common Name\", \"Virus Pangolin Classification\", \"Accession\")) \n\n# remove rows where submitting_lab is na and the collection date has at least has the year-month and the year is in 23/24\n# no longer try to actively reach out for/expecting to receive 2020, 2021, or 2022 data\ngap_genbank_labs_na_rm <- gap_genbank_labs_select[\n  str_detect(gap_genbank_labs_select$YM_collection, \"[[:digit:]]{4}-[[:digit:]]{2}(-[[:digit:]]{2})?\") & \n  str_detect(gap_genbank_labs_select$YM_collection, \"^2023|^2024\")\n,]\n```\n:::\n\n\n\n\n\n\n\n\n\n\n- Group labs using VIRUS_ID_PART1 and VIRUS_ID_PART2\n- submitting lab/originating lab often have variations of the same lab name making grouping difficult\n- create a new variable \"gap_lab\"\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ngap_gisaid_labs_na_rm <- gap_gisaid_labs_na_rm %>% \n  mutate(gap_lab = case_when(\n    \n    # ELR Submitters\n    # Aegis -ASC- or -CDC-ASC-\n    VIRUS_ID_PART1 =='ASC' | VIRUS_ID_PART2 =='ASC' ~ \"Aegis\",\n    # Helix -CDC-STM-\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='STM' ~ \"Helix\",\n    # Helix CDC-VSX-\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='VSX' ~ \"Helix\",\n    # Labcorp -CDC-LC-\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='LC' ~ \"Labcorp\",\n    # Quest -QDX- or -CDC-QDX-\n    VIRUS_ID_PART1 =='QDX' ~ \"Quest\",\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='QDX' ~ \"Quest\",\n    # UW 3 formats, -UW-, -CDC-UW- and Dr Michael Gale -MG_LHLV_0\n    VIRUS_ID_PART1 =='UW' | VIRUS_ID_PART1 == 'MG_LHLV_O' ~ \"UW Virology\",\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='UW' ~ \"UW Virology\",\n    \n    # PHL - 2 formats, the classic -PHL- and the CDC format -CDC-2-\n    VIRUS_ID_PART1 =='PHL' ~ \"PHL\",\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='2' ~ \"PHL/CDC\",\n  \n    # Template Submitters\n    # Arizona State\n    VIRUS_ID_PART1 =='ASU' ~ \"ASU\",\n    # Curative \n    VIRUS_ID_PART1 =='Curative' ~ \"Curative\",\n    # Infinity Biologix\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='IBX' ~ \"Infinity Biologix\",\n    # Lauring Lab - University of Michigan, Vanderbilt Medical Center\n    VIRUS_ID_PART1 =='IVY' ~ \"Lauring lab\",\n    # Seattle Flu Study\n    VIRUS_ID_PART1 =='S' ~ \"Seattle Flu Study\",\n    # US Air Force School of Medicine\n    VIRUS_ID_PART1 =='USAFSAM' ~ \"USAFSAM\",\n    \n    # Other GISAID Labs  \n    # Mako Medical\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='MMB' ~ \"Mako Medical\",\n    # Northwestern Memorial Hospital\n    VIRUS_ID_PART1 =='NM' ~ \"NW Memorial Hosp\",\n    # Oregon Health and Science University Lab Services Molecular Microbiology Lab\n    VIRUS_ID_PART1 =='OHSU' ~ \"OHSU\",\n    # Oregon State University TRACE\n    VIRUS_ID_PART1 =='TRACE' ~ \"OSU TRACE\",\n    # Kansas Health\n    VIRUS_ID_PART1 =='KHEL' ~ \"Kansas Health\",\n    # Virginia Tech\n    VIRUS_ID_PART1 =='VTVAS' | VIRUS_ID_PART1=='VTVASGSC' ~ \"Virginia Tech\",\n    # Grubaugh Lab Yale\n    VIRUS_ID_PART1 =='Yale' ~ \"Yale\",\n    \n    # If -CDC- but no PART2, label CDC\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='' ~ originating_lab,\n    \n    # Everything else, list submitting lab\n    TRUE ~ submitting_lab\n    \n  ))\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n- Group labs using VIRUS_ID_PART1 and VIRUS_ID_PART2\n- submitting lab/originating lab often have variations of the same lab name making grouping difficult\n- create a new variable \"gap_lab\"\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ngap_genbank_labs_na_rm <- gap_genbank_labs_na_rm %>% \n  mutate(gap_lab = case_when(\n    \n    # ELR Submitters\n    # Aegis -ASC- or -CDC-ASC-\n    VIRUS_ID_PART1 =='ASC' | VIRUS_ID_PART2 =='ASC' ~ \"Aegis\",\n    # Helix -CDC-STM-\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='STM' ~ \"Helix\",\n    # Helix CDC-VSX-\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='VSX' ~ \"Helix\",\n    # Labcorp -CDC-LC-\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='LC' ~ \"Labcorp\",\n    # Quest -QDX- or -CDC-QDX-\n    VIRUS_ID_PART1 =='QDX' ~ \"Quest\",\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='QDX' ~ \"Quest\",\n    # UW 3 formats, -UW-, -CDC-UW- and Dr Michael Gale -MG_LHLV_0\n    VIRUS_ID_PART1 =='UW' | VIRUS_ID_PART1 == 'MG_LHLV_O' ~ \"UW Virology\",\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='UW' ~ \"UW Virology\",\n    \n    # PHL - 2 formats, the classic -PHL- and the CDC format -CDC-2-\n    VIRUS_ID_PART1 =='PHL' ~ \"PHL\",\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='2' ~ \"PHL/CDC\",\n  \n    # Template Submitters\n    # Arizona State\n    VIRUS_ID_PART1 =='ASU' ~ \"ASU\",\n    # Curative \n    VIRUS_ID_PART1 =='Curative' ~ \"Curative\",\n    # Infinity Biologix\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='IBX' ~ \"Infinity Biologix\",\n    # Lauring Lab - University of Michigan, Vanderbilt Medical Center\n    VIRUS_ID_PART1 =='IVY' ~ \"Lauring lab\",\n    # Seattle Flu Study\n    VIRUS_ID_PART1 =='S' ~ \"Seattle Flu Study\",\n    # US Air Force School of Medicine\n    VIRUS_ID_PART1 =='USAFSAM' ~ \"USAFSAM\",\n    \n    # Other GISAID Labs  \n    # Mako Medical\n    VIRUS_ID_PART1 =='CDC' & VIRUS_ID_PART2 =='MMB' ~ \"Mako Medical\",\n    # Northwestern Memorial Hospital\n    VIRUS_ID_PART1 =='NM' ~ \"NW Memorial Hosp\",\n    # Oregon Health and Science University Lab Services Molecular Microbiology Lab\n    VIRUS_ID_PART1 =='OHSU' ~ \"OHSU\",\n    # Oregon State University TRACE\n    VIRUS_ID_PART1 =='TRACE' ~ \"OSU TRACE\",\n    # Kansas Health\n    VIRUS_ID_PART1 =='KHEL' ~ \"Kansas Health\",\n    # Virginia Tech\n    VIRUS_ID_PART1 =='VTVAS' | VIRUS_ID_PART1=='VTVASGSC' ~ \"Virginia Tech\",\n    # Grubaugh Lab Yale\n    VIRUS_ID_PART1 =='Yale' ~ \"Yale\",\n    \n    # Everything else, list submitting lab\n    TRUE ~ cleaned_lab\n    \n  ))\n```\n:::\n\n\n\n\n\n\n\n\n\n\n- Create gap by lab summary table - used for email alert\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Define today and 30 days ago\ntoday <- Sys.Date()\nthirty_days <- today - 30\n\n# Filter data to allow a 30 day lag\ngap_gisaid_labs_na_rm <- gap_gisaid_labs_na_rm %>% filter(`Collection date` < thirty_days)\n\n# Filter wa_gisaid to same time period to obtain total records \ngisaid_2023_beyond <- wa_gisaid %>% filter(str_detect(YM_collection, \"^2023|^2024\")) %>% filter(`Collection date` < thirty_days)\n\n# Group by lab\ngap_by_lab <- gap_gisaid_labs_na_rm %>% \n  mutate(gap_lab = case_when(\n         gap_lab == \"Kaiser Permanente Washington Health Research Institute\" ~ \"Kaiser Permanente\",\n         TRUE ~ gap_lab),\n         Y_collection = substr(YM_collection, 1, 4)) %>%\n  select(gap_lab, Y_collection) %>% \n  # Total number of gap records\n  group_by(gap_lab) %>% \n  mutate(Total = n()) %>% \n  arrange(desc(Total)) %>% \n  group_by(gap_lab, Y_collection) %>%\n  mutate(Count = n()) %>%\n  distinct() %>% \n  ungroup()\n\n# Remove Total column if there is only one year:\nif(all(gap_by_lab$Count == gap_by_lab$Total)) gap_by_lab$Total <- NULL\n\n# Rename NA gap labs:\ngap_by_lab$gap_lab[is.na(gap_by_lab$gap_lab)] <- 'NA'\n\n# Add Total row (one per collection year):\n# Define collection years\ncollection_years <- unique(gap_by_lab$Y_collection)\n\n# create an empty Total row for each collection year\ngap_by_lab[(nrow(gap_by_lab)+1):(nrow(gap_by_lab)+length(collection_years)), 'gap_lab'] <- rep('Total', length(collection_years))\ngap_by_lab[gap_by_lab$gap_lab == 'Total', 'Y_collection'] <- collection_years\n\nif(length(collection_years) > 1) {\n  # Calculate running total for all years\n  gap_by_lab[gap_by_lab$gap_lab == 'Total', 'Total'] <- sum(gap_by_lab$Count, na.rm = T)\n}\n\n# Calculate Total for each collection year\nfor (year in collection_years) {\n  gap_by_lab[gap_by_lab$gap_lab == 'Total' & gap_by_lab$Y_collection == year, 'Count'] <- \n    sum(gap_by_lab[gap_by_lab$Y_collection == year, 'Count'], na.rm = T) \n}\n\n# Add percentage to year columns and convert to string with 'COUNT (PERCENT_OF_GISAID%)' format\ngap_by_lab <- gap_by_lab %>% \n  rowwise() %>% \n  mutate(Pct = 100*Count/nrow(gisaid_2023_beyond[substr(gisaid_2023_beyond$YM_collection, 1, 4) == Y_collection, ]),\n         Count = paste0(Count, \n                        ' (', \n                        ifelse(Pct < 0.01, '<0.01', format(round(Pct, digits = 2), nsmall = 2)),\n                        '%)'),\n         Pct = NULL) %>% \n  tidyr::pivot_wider(names_from = Y_collection,\n                     values_from = Count,\n                     values_fill = '0') \n  \n#reorder columns:\ngap_by_lab <- gap_by_lab %>% select(`Gap Lab` = gap_lab, starts_with('202'), any_of('Total'))\n\n# Adjust table formatting and add footnote\ngap_by_lab_ft <- flextable(gap_by_lab) %>% \n  theme_vanilla() %>% \n  width(j = 'Gap Lab',\n                   width = 2.50) %>%\n  width(j = startsWith(names(gap_by_lab), '202'),\n                   width = 1.25) %>% \n  footnote(i = 1, j = startsWith(names(gap_by_lab), '202'),\n                      value = as_paragraph('n (%) where % is equal to n / Total N of GISAID sequences during the given year'),\n                      ref_symbols = '+',\n                      part = 'header')\n\nif('Total' %in% names(gap_by_lab)) {\n  gap_by_lab_ft <- width(gap_by_lab_ft, j = 'Total', width = 0.75)\n}\n\n# Save gap_by_lab for email summary notification\nsave_as_image(gap_by_lab_ft, \n                         path=\"Gap_data/email_summaries/gap_by_lab_gisaid_summary.png\", \n                         webshot = \"webshot2\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Create gap by lab summary table \n\n- used for email alert\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Define today and 30 days ago\ntoday <- Sys.Date()\nthirty_days <- today - 30\n\n# Filter data to allow a 30 day lag\ngap_genbank_labs_na_rm <- gap_genbank_labs_na_rm %>% \n  mutate(`Isolate Collection date` = as.Date(`Isolate Collection date`)) %>% \n  filter(`Isolate Collection date` < thirty_days)\n\n# Filter wa_gisaid to same time period to obtain total records \ngenbank_2023_beyond <- genbank %>% \n  filter(str_detect(`Isolate Collection date`, \"^2023|^2024\")) %>% \n  mutate(`Isolate Collection date` = as.Date(`Isolate Collection date`)) %>% \n  filter(`Isolate Collection date` < thirty_days)\n\n# Group by lab\ngap_by_lab_genbank <- gap_genbank_labs_na_rm %>% \n  mutate(gap_lab = case_when(\n         gap_lab == \"Kaiser Permanente Washington Health Research Institute\" ~ \"Kaiser Permanente\",\n         TRUE ~ gap_lab),\n         Y_collection = substr(YM_collection, 1, 4)) %>%\n  select(gap_lab, Y_collection) %>% \n  # Total number of gap records\n  group_by(gap_lab) %>% \n  mutate(Total = n()) %>% \n  arrange(desc(Total)) %>% \n  group_by(gap_lab, Y_collection) %>%\n  mutate(Count = n()) %>%\n  distinct() %>% \n  ungroup()\n\n# Remove Total column if there is only one year:\nif(all(gap_by_lab_genbank$Count == gap_by_lab_genbank$Total)) gap_by_lab_genbank$Total <- NULL\n\n# Rename NA gap labs:\ngap_by_lab_genbank$gap_lab[is.na(gap_by_lab_genbank$gap_lab)] <- 'NA'\n\n# Add Total row (one per collection year):\n# Define collection years\ncollection_years <- unique(gap_by_lab_genbank$Y_collection)\n\n\n# create an empty Total row for each collection year\ngap_by_lab_genbank[(nrow(gap_by_lab_genbank)+1):(nrow(gap_by_lab_genbank)+length(collection_years)), 'gap_lab'] <- rep('Total', length(collection_years))\ngap_by_lab_genbank[gap_by_lab_genbank$gap_lab == 'Total', 'Y_collection'] <- collection_years\n\nif(length(collection_years) > 1) {\n  # Calculate running total for all years\n  gap_by_lab_genbank[gap_by_lab_genbank$gap_lab == 'Total', 'Total'] <- sum(gap_by_lab_genbank$Count, na.rm = T)\n}\n\n# Calculate Total for each collection year\nfor (year in collection_years) {\n  gap_by_lab_genbank[gap_by_lab_genbank$gap_lab == 'Total' & gap_by_lab_genbank$Y_collection == year, 'Count'] <- \n    sum(gap_by_lab_genbank[gap_by_lab_genbank$Y_collection == year, 'Count'], na.rm = T) \n}\n  \n# Add percentage to year columns and convert to string with 'COUNT (PERCENT_OF_GISAID%)' format\ngap_by_lab_genbank <- gap_by_lab_genbank %>% \n  rowwise() %>% \n  mutate(Pct = 100*Count/nrow(genbank_2023_beyond[substr(genbank_2023_beyond$`Isolate Collection date`, 1, 4) == Y_collection, ]),\n         Count = paste0(Count, \n                        ' (', \n                        ifelse(Pct < 0.01, '<0.01', format(round(Pct, digits = 2), nsmall = 2)),\n                        '%)'),\n         Pct = NULL) %>% \n  tidyr::pivot_wider(names_from = Y_collection,\n                     values_from = Count,\n                     values_fill = '0') \n  \n#reorder columns:\ngap_by_lab_genbank <- gap_by_lab_genbank %>% select(`Gap Lab` = gap_lab, starts_with('202'), any_of('Total'))\n\n# Adjust table formatting and add footnote\ngap_by_lab_genbank_ft <- flextable(gap_by_lab_genbank) %>% \n  theme_vanilla() %>% \n  width(j = 'Gap Lab',\n                   width = 2.50) %>%\n  width(j = startsWith(names(gap_by_lab_genbank), '202'),\n                   width = 1.25) %>% \n  footnote(i = 1, j = startsWith(names(gap_by_lab_genbank), '202'),\n                      value = as_paragraph('n (%) where % is equal to n / Total N of GISAID sequences during the given year'),\n                      ref_symbols = '+',\n                      part = 'header')\n\nif('Total' %in% names(gap_by_lab_genbank)) {\n  gap_by_lab_genbank_ft <-  width(gap_by_lab_genbank_ft, j = 'Total', width = 0.75)\n}\n\n# Save gap_by_lab_genbank for email summary notification\nsave_as_image(gap_by_lab_genbank_ft, \n                         path=\"Gap_data/email_summaries/gap_by_lab_genbank_summary.png\", \n                         webshot = \"webshot2\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Create a pivot table from gap_gisaid_labs by proportion.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# create a pivot table where the observations are submitting_lab, variables are YM_collection, and the values are the proportion of observations\nsumm_table_prop <- gap_gisaid_labs_na_rm %>%\n  # select the submitting_lab and YM_collection variables\n  select(gap_lab, YM_collection) %>% \n  # group by submitting_lab and YM_collection\n  group_by(gap_lab, YM_collection) %>% \n  # summarise the number of observations\n  summarise(count = n()) %>%\n  # ungroup\n  ungroup() %>%\n  # create new var that contains the total number of records/observations from gap_gisaid_labs_na_rm\n  mutate(total = sum(count)) %>%\n  # create new var that contains the proportion in percent of the count/total for each submitting_lab and YM_collection\n  mutate(proportion = (count/total) * 100) %>%\n  # remove the count and total column\n  select(-c(count, total)) %>%\n  # group by submitting_lab\n  group_by(gap_lab) %>%\n  # create new var that contains the sum of proportions by submitting_lab\n  mutate(Grand_Total = sum(proportion)) %>%\n  # pivot the table wide so that the observations are submitting_lab, variables are YM_collection, and the values are the proportion\n  pivot_wider(\n    names_from = YM_collection,\n    values_from = proportion\n  ) %>%\n  # replace all NA with 0.00\n  # probably an easier way, but this will mutate across all numeric columns and replace_na with 0. Numeric vars are hard to format with 0.00 (could use options(digits=2) but it didn't work for me - FA 2/9/23)\n  mutate(across(where(is.numeric),~replace_na(.,0.00))) %>%\n  #rename submitting_lab as Submitting_Lab\n  rename(\"lab\" = \"gap_lab\") %>%\n  arrange(desc(Grand_Total))\n\n# initialize an empty df that is 1 row, the same number of variables as summ_table, and the var names as summ_table. This will hold the col sums\nsumm_row_init_prop <- as.data.frame(\n  matrix(\n    nrow = 1, \n    ncol = ncol(summ_table_prop),\n    dimnames = list(\n      c(),\n      names(summ_table_prop))\n  )\n)\n\n# assign 'Grand_Total' to var position 1 this will just denote the row is a summary rather than a Submitting_Lab\nsumm_row_init_prop[[1, 1]] <- \"Grand_Total\"\n# assign the sums of var's 2:X from summ_table to var's 2:ncol(summ_table)\nsumm_row_init_prop[1, 2:ncol(summ_row_init_prop)] <- colSums(summ_table_prop[,2:ncol(summ_table_prop)],)\n\n# create a final df summ_table_clean by binding summ_row_init to summ_table and cleaning up the df \nsumm_table_prop_clean <- summ_table_prop  %>%\n  # row bind summ_row_init\n  rbind(summ_row_init_prop[1,]) %>%\n  # reorder var's with Submitting_Lab, followed by the YM_collection (increasing) and Grand_Total\n  select(c(\"lab\", sort(names(summ_table_prop), decreasing = FALSE)[! sort(names(summ_table_prop), decreasing = FALSE) %in% c(\"NA\", \"lab\", \"Grand_Total\")], \"Grand_Total\")) %>%\n  # round all values that are numeric to the 2nd decimal place\n  mutate_if(is.numeric, round, digits = 2)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Create a pivot table from gap_gisaid_labs by count.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# create a pivot table where the observations are submitting_lab, variables are YM_collection, and the values are the proportion of observations\nsumm_table_count <- gap_gisaid_labs_na_rm %>%\n  # select the submitting_lab and YM_collection variables\n  select(gap_lab, YM_collection) %>% \n  # group by submitting_lab and YM_collection\n  group_by(gap_lab, YM_collection) %>% \n  # summarise the number of observations\n  summarise(count = n()) %>%\n  # create new var that contains the sum of proportions by submitting_lab\n  mutate(Grand_Total = sum(count)) %>%\n  # pivot the table wide so that the observations are submitting_lab, variables are YM_collection, and the values are the proportion\n  pivot_wider(\n    names_from = YM_collection,\n    values_from = count\n  ) %>% \n  # replace all NA with 0.00\n  mutate(across(where(is.numeric),~replace_na(.,0.00))) %>%\n  #rename submitting_lab as Submitting_Lab\n  rename(\"lab\" = \"gap_lab\") %>%\n  arrange(desc(Grand_Total))\n\n# initialize an empty df that is 1 row, the same number of variables as summ_table, and the var names as summ_table. This will hold the col sums\nsumm_row_init_count <- as.data.frame(\n  matrix(\n    nrow = 1, \n    ncol = ncol(summ_table_count),\n    dimnames = list(\n      c(),\n      names(summ_table_count))\n  )\n)\n\n# assign 'Grand_Total' to var position 1 this will just denote the row is a summary rather than a Submitting_Lab\nsumm_row_init_count[[1, 1]] <- \"Grand_Total\"\n# assign the sums of var's 2:X from summ_table to var's 2:ncol(summ_table)\nsumm_row_init_count[1, 2:ncol(summ_row_init_count)] <- colSums(summ_table_count[,2:ncol(summ_table_count)],)\n\n# create a final df summ_table_clean by binding summ_row_init to summ_table and cleaning up the df \nsumm_table_count_clean <- summ_table_count  %>%\n  # row bind summ_row_init\n  rbind(summ_row_init_count[1,]) %>%\n  # reorder var's with Submitting_Lab, followed by the YM_collection (increasing) and Grand_Total\n  select(c(\"lab\", sort(names(summ_table_count), decreasing = FALSE)[! sort(names(summ_table_count), decreasing = FALSE) %in% c(\"NA\", \"lab\", \"Grand_Total\")], \"Grand_Total\")) \n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Create an xlsx workbook, format, and output.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# create workbook wb\nwb <- createWorkbook()\n\n# add worksheets named 'Summary Proportion', 'Summary Count, 'Details'\naddWorksheet(wb, \"Summary Proportion\", gridLines = TRUE)\naddWorksheet(wb, \"Summary Count\", gridLines = TRUE)\naddWorksheet(wb, \"Details\", gridLines = TRUE)\n\n# write the summ_table_prop_clean df to the 'Summary Proportion' sheet\nwriteData(wb, \"Summary Proportion\", summ_table_prop_clean)\n# write the summ_table_count_clean df to the 'Summary Count' sheet\nwriteData(wb, \"Summary Count\", summ_table_count_clean)\n# write the gap_gisaid_labs df to the 'Details' sheet\nwriteData(wb, \"Details\", gap_gisaid_labs_select)\n\n# set col width of var position 1 from the 'Summary Proportion' sheet to 125\nsetColWidths(wb, \"Summary Proportion\", cols = 1, width = 125)\n# set col width of var position 1 from the 'Summary Count' sheet to 125\nsetColWidths(wb, \"Summary Count\", cols = 1, width = 125)\n\n# create a green, yellow, orange, red, and grey style\ngreen_style <- createStyle(fontColour = \"#000000\", bgFill = \"#C6EFCE\")\nyellow_style <- createStyle(fontColour = \"#000000\", bgFill = \"#FFFF00\")\norange_style <- createStyle(fontColour = \"#000000\", bgFill = \"#FFA500\")\nred_style <- createStyle(fontColour = \"#000000\", bgFill = \"#FF0000\")\ngrey_style <- createStyle(fontColour = \"#000000\", bgFill = \"#D3D3D3\")\n\n# format any values in the 'Summary Proportion' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >=0 with green_style\nconditionalFormatting(\n  wb, \n  \"Summary Proportion\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = \">=0\", \n  style = green_style\n)\n# format any values in the 'Summary Proportion' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >3 with yellow_style\nconditionalFormatting(\n  wb, \n  \"Summary Proportion\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = \">3\", \n  style = yellow_style \n)\n# format any values in the 'Summary' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >5 with orange_style\nconditionalFormatting(\n  wb, \n  \"Summary Proportion\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = \">5\", \n  style = orange_style\n)\n# format any values in the 'Summary Proportion' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >10 with red_style\nconditionalFormatting(\n  wb, \n  \"Summary Proportion\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = \">10\", \n  style = red_style\n)\n# format any values in the 'Summary Proportion' sheet in vars 1:ncol(summ_table_clean) and row 1 with grey_style (i.e first row)\nconditionalFormatting(\n  wb, \n  \"Summary Proportion\", \n  cols = 1:ncol(summ_table_prop_clean),\n  rows = 1,\n  rule = \"!=0\", \n  style = grey_style\n)\n# format any values in the 'Summary Proportion' sheet in vars 1:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that contains the string 'Grand_Total' with grey_style (i.e first col)\nconditionalFormatting(\n  wb, \n  \"Summary Proportion\", \n  cols = 1,\n  rows = 1:nrow(summ_table_prop_clean)+1,\n  type = \"contains\",\n  rule = \"Grand_Total\", \n  style = grey_style\n)\n\n# obtain the count corresponding to the 3, 5, 10% proportions used for color coding cells above\ntotal_count_x <- nrow(gap_gisaid_labs_na_rm)\n# corresponding count for 3%\nyellow_count_x <- (3/100)*total_count_x\n# corresponding count for 5%\norange_count_x <- (5/100)*total_count_x\n# corresponding count for 10%\nred_count_x <- (10/100)*total_count_x\n\n# format any values in the 'Summary Count' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >=0 with green_style\nconditionalFormatting(\n  wb, \n  \"Summary Count\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = \">=0\", \n  style = green_style\n)\n# format any values in the 'Summary Count' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >3 with yellow_style\nconditionalFormatting(\n  wb, \n  \"Summary Count\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = paste0(\">\", yellow_count_x), \n  style = yellow_style \n)\n# format any values in the 'Summary Count' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >5 with orange_style\nconditionalFormatting(\n  wb, \n  \"Summary Count\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = paste0(\">\", orange_count_x), \n  style = orange_style\n)\n# format any values in the 'Summary Count' sheet in vars 2:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that are >10 with red_style\nconditionalFormatting(\n  wb, \n  \"Summary Count\", \n  cols = 2:ncol(summ_table_prop_clean),\n  rows = 1:nrow(summ_table_prop_clean)+1, \n  rule = paste0(\">\", red_count_x), \n  style = red_style\n)\n# format any values in the 'Summary Count' sheet in vars 1:ncol(summ_table_clean) and row 1 with grey_style (i.e first row)\nconditionalFormatting(\n  wb, \n  \"Summary Count\", \n  cols = 1:ncol(summ_table_prop_clean),\n  rows = 1,\n  rule = \"!=0\", \n  style = grey_style\n)\n# format any values in the 'Summary Count' sheet in vars 1:ncol(summ_table_clean) and rows 2:nrow(summ_table_clean)+1 that contains the string 'Grand_Total' with grey_style (i.e first col)\nconditionalFormatting(\n  wb, \n  \"Summary Count\", \n  cols = 1,\n  rows = 1:nrow(summ_table_prop_clean)+1,\n  type = \"contains\",\n  rule = \"Grand_Total\", \n  style = grey_style\n)\n\n# output wb\nsaveWorkbook(wb, \n             file.path(\"Gap_data\", \n                       paste0(\"GAP_GISAID_LABS_\", today(), \".xlsx\")\n                       ), \n             TRUE\n             )\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# Gap Summary Email\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Read in HTML\ngap_gisaid_table_email <- add_image(\"Gap_data/email_summaries/gap_by_lab_gisaid_summary.png\", \n                             width = 800)\ngap_genbank_table_email <- add_image(\"Gap_data/email_summaries/gap_by_lab_genbank_summary.png\", \n                             width = 800)\n\n# Make the email body - make updates to email here if needed\nmessage_body <-\n  glue::glue(\n    \"Good Morning,\n\nA new wa_gisaid.rds and GAP_GISAID_LABS_{Sys.Date()}.csv are available.\n\nBelow is the GENBANK Gap Data Summary for 2023-01-01 to {thirty_days}:\n\n{gap_genbank_table_email}\n\n\nBelow is the GISAID Gap Data Summary for 2023-01-01 to {thirty_days}:\n\n{gap_gisaid_table_email}\n\nThanks,\n\nDIQA\n\nps - I'm a bot, bleep bloop\"\n  )\nemail <- blastula::compose_email(body = md(message_body))\n\n# Sending email by SMTP using a credentials file\n email %>%\n   smtp_send(\n     to = c(\"\"),\n     from = \"\",\n     subject = \"Sequencing - Automated Notification - Gap Data/wa_gisaid.rds Complete\",\n     credentials = creds_key(id = \"\")\n   )\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n# Produce \"monthly\" files for lab outreach\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Will need to read in previously sent files to filter out data for new months files\n# TBD\n\n# Output a file for each lab\n# gap_outreach_final %>%\n#    group_by(SUBMITTING_LAB) %>%\n#    group_walk(~ write.xlsx(.x, paste0(\"Gap_data/lab_outreach_files/\", .y$SUBMITTING_LAB, \"_outreach_data_\",today(), \".xlsx\")), .keep=TRUE)\n```\n:::\n",
    "supporting": [
      "gap_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}